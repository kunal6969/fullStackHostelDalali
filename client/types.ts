/**
 * @file This file contains all the core type definitions and interfaces used throughout the Hostel Dalali application.
 * It serves as the single source of truth for the data structures, ensuring type safety and consistency.
 */


/**
 * Represents a registered user in the application.
 */
export interface User {
  id: string;
  email: string; // mnit.ac.in email
  fullName: string;
  rollNumber: string;
  gender: 'Male' | 'Female' | 'Other';
  currentRoom: RoomLocation | null;
  preferences: ExchangePreferences;
  phoneNumber: string; // Made non-optional for profile completeness in edit form
  hasActiveListing?: boolean; 
  friends?: Friend[]; // Array of friend user objects (populated from backend)
}

/**
 * A simplified version of the User interface, representing a user in the context of a friends list.
 */
export interface Friend extends Pick<User, 'id' | 'fullName' | 'rollNumber' | 'gender' | 'currentRoom'> {}

/**
 * Represents a friend request sent from one user to another.
 */
export interface FriendRequest {
  id: string;
  from: Pick<User, 'id' | 'fullName' | 'rollNumber' | 'gender'>;
  toUserId: string;
  createdAt: string;
}

/**
 * Defines the physical location and properties of a hostel room.
 */
export interface RoomLocation {
  hostel: string;
  block: string;
  roomNumber: string;
  type: RoomType; // e.g., 'Single', 'Double Shared'
}

/**
 * Allowed types for a hostel room. 'Any' is used for search filters.
 */
export type RoomType = 'Single' | 'Double Shared' | 'Triple Shared' | 'Any';
/**
 * The type of a room listing, determining its interaction model.
 */
export type ListingType = 'Exchange' | 'Bidding';

/**
 * Represents a room that a user has listed on the platform for exchange or bidding.
 */
export interface RoomListing {
  id: string;
  listedBy: Pick<User, 'id' | 'fullName' | 'rollNumber' | 'gender'>; 
  roomDetails: RoomLocation;
  listingType: ListingType;
  description: string;
  desiredTradeConditions?: string; 
  status: 'Open' | 'PendingConfirmation' | 'Closed';
  createdAt: string; // ISO date string
  interestCount?: number; 
}

/**
 * Enhanced trending room listing with additional metrics from backend.
 */
export interface TrendingListing extends RoomListing {
  activeRequestsCount: number;    // Number of active exchange requests
  approvedRequestsCount: number;  // Number of approved exchanges
  trendingScore: number;          // Calculated trending score
  views: number;                  // Number of views
}

/**
 * Pagination information for API responses.
 */
export interface PaginationInfo {
  currentPage: number;
  totalPages: number;
  totalCount: number;
  hasMore: boolean;
}

/**
 * The data structure for the form used to create or edit a RoomListing.
 */
export interface RoomListingFormData {
    roomDetails: RoomLocation;
    listingType: ListingType;
    description: string;
    desiredTradeConditions?: string;
    roomProofFile?: File | null;
}

/**
 * Defines a user's preferences for a desired room exchange.
 */
export interface ExchangePreferences {
  hostels: string[];
  blocks: string[];
  floor?: string; 
  roomType?: RoomType;
  notes?: string;
}

/**
 * Represents a room suggestion generated by the Gemini AI, including the reasoning behind the suggestion.
 */
export interface SuggestedRoom extends RoomLocation {
  id: string; // ID of the RoomListing
  reasoning: string;
  listedBy: Pick<User, 'id' | 'fullName' | 'rollNumber' | 'gender'>; 
}

/**
 * Defines the shape of the authentication context, including user data and auth-related functions.
 */
export interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password_or_otp: string, details?: { fullName?: string; gender?: User['gender']; isSignup: boolean }) => Promise<void>;
  logout: () => void;
  updateUserRoom: (room: RoomLocation) => void;
  updateUserPreferences: (prefs: ExchangePreferences) => void;
  updateUserDetails: (details: Partial<Pick<User, 'fullName' | 'rollNumber' | 'phoneNumber'>>) => void;
  // New methods for friends
  addFriend: (friendId: string) => void;
  removeFriend: (friendId: string) => void;
  refreshUser: () => void;
}

/**
 * Represents a formal request from one user to another to exchange rooms, linked to a specific listing.
 */
export interface MatchRequest {
  id: string;
  requesterId: string; 
  listingId: string; 
  requestedRoomId?: string; 
  status: 'Pending' | 'Accepted' | 'Rejected' | 'Confirmed';
  createdAt: string;
  approvals: string[]; // Array of user IDs who have approved the deal
}

/**
 * Interface for exchange dashboard statistics.
 */
export interface ExchangeDashboard {
  sentRequests: {
    total: number;
    pending: number;
    approved: number;
    rejected: number;
  };
  receivedRequests: {
    total: number;
    pending: number;
    approved: number;
    rejected: number;
  };
  approvedExchanges: number;
  totalActiveListings: number;
  recentActivity: ExchangeActivity[];
  summary: {
    totalRequestsSent: number;
    totalRequestsReceived: number;
    totalApprovedExchanges: number;
    pendingAction: number;
  };
}

/**
 * Interface for exchange activity items.
 */
export interface ExchangeActivity {
  _id: string;
  requesterId: {
    id: string;
    fullName: string;
    rollNumber: string;
    gender: string;
  };
  listingId: {
    id: string;
    title: string;
    currentRoom: {
      hostel: string;
      block: string;
      roomNumber: string;
      type: string;
    };
  };
  status: 'Pending' | 'Approved' | 'Rejected' | 'Confirmed';
  createdAt: string;
  updatedAt: string;
  isRequester: boolean;
  isListingOwner: boolean;
  actionType: 'sent' | 'received';
}

/**
 * The expected JSON response structure from the Gemini API when fetching room suggestions.
 */
export interface GeminiSuggestionResponse {
  suggestions: Array<{
    roomId: string;
    hostel: string;
    block: string;
    roomNumber: string;
    type: string;
    reasoning: string;
  }>;
}

/**
 * Type guard to check if an object is a `RoomListing`.
 * This is useful for differentiating between `RoomListing` and `SuggestedRoom` types.
 * @param item The object to check.
 * @returns {boolean} True if the item is a RoomListing, false otherwise.
 */
export const isRoomListing = (item: any): item is RoomListing => {
  return (
    typeof item === 'object' &&
    item !== null &&
    'status' in item &&
    'listingType' in item &&
    'roomDetails' in item &&
    'createdAt' in item &&
    'description' in item
  );
};

// =======================
// Messaging Feature Types
// =======================

/**
 * Represents a direct message sent between two users regarding a specific listing.
 */
export interface DirectMessage {
  id: string;
  listingId: string;
  listingRoomSummary: string; // e.g., "HL-1 A/101"
  senderId: string;
  senderName: string;
  receiverId: string;
  receiverName: string;
  message: string;
  timestamp: string; // ISO date string
  isReadByReceiver: boolean;
}

// ========================
// Common Chat Room Types
// ========================

/**
 * Represents a single option within a poll.
 */
export interface PollOption {
  text: string;
  voters: string[]; // Array of user IDs who voted for this option
}

/**
 * Represents a poll created in the common chat room.
 */
export interface Poll {
  id: string;
  question: string;
  options: PollOption[];
}

/**
 * The allowed types of messages in the common chat room.
 */
export type ChatMessageType = 'text' | 'image' | 'poll';

/**
 * The base structure for any message in the common chat room.
 */
export interface BaseChatMessage {
  id: string;
  sender: { id: string; name: string } | { id: 'anonymous'; name: 'Anonymous' };
  timestamp: string; // ISO string
}

/**
 * A standard text message in the common chat.
 */
export interface TextMessage extends BaseChatMessage {
  type: 'text';
  content: string;
}

/**
 * An image message in the common chat.
 */
export interface ImageMessage extends BaseChatMessage {
  type: 'image';
  imageUrl: string; // Will store as base64 data URL
}

/**
 * A poll message in the common chat.
 */
export interface PollMessage extends BaseChatMessage {
  type: 'poll';
  poll: Poll;
}

/**
 * A union type representing any possible message in the common chat room.
 */
export type CommonChatMessage = TextMessage | ImageMessage | PollMessage;

// =====================
// Events Feature Types
// =====================

/**
 * Represents a campus event.
 */
export interface Event {
  id: string;
  name: string;
  organizer: string; // Club or Committee Name
  dateTime: string; // ISO date string
  location: string;
  description: string;
  registrationLink?: string; // Optional external registration link (e.g., Google Form)
  registeredUsers: string[]; // Array of user IDs
  status: 'approved' | 'pending';
  submittedBy: string; // User ID of the person who submitted it
}

/**
 * The data structure for the form used to submit a new event for approval.
 */
export interface EventFormData {
  name: string;
  organizer: string;
  date: string; // "YYYY-MM-DD"
  time: string; // "HH:MM"
  location: string;
  description: string;
  registrationLink?: string;
}

// ===========================
// Attendance Tracker Types
// ===========================

/**
 * Represents a single course for the attendance tracker.
 */
export interface Course {
  id: string;
  name: string;
  attendedDays: string[]; // Array of ISO date strings 'YYYY-MM-DD'
  missedDays: string[]; // Array of ISO date strings 'YYYY-MM-DD'
  color: string; // Hex color for the graph
}

/**
 * The enhanced data structure for creating a new course (backend requirements).
 */
export interface CourseFormData {
  courseName: string;        // Required
  courseCode: string;        // Required  
  instructor: string;        // Required
  semester: string;          // Required
  academicYear: string;      // Required
  credits: number;           // Required (1-10)
  schedule: ScheduleItem[];  // Optional but validate if provided
  startDate: string;         // Required (YYYY-MM-DD)
  endDate: string;           // Required (YYYY-MM-DD)
  description?: string;      // Optional
  color?: string;            // Optional (hex format)
  reminders?: {
    enabled: boolean;
    minutesBefore: number;
  };
}

/**
 * Schedule item for course timing.
 */
export interface ScheduleItem {
  day: 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday';
  startTime: string;     // Format: HH:MM
  endTime: string;       // Format: HH:MM
  venue?: string;
}